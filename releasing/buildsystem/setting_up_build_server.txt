Installing perl

	- sudo apt-get install perl

	- install packages:
		- apt-get install libgmp-dev
		- sudo cpan Net::SSH::Perl
		- if building failes with "Could not make: unknown error" make might be missing, install with 'sudo apt-get install build-essential'
		- if it still does not install: 'sudo cpan' 'install -f Net::SSH::Perl' - this forces the install even if dependencies are missing or not passing all tests
 
 
Setting up SSH authentication
	- sudo apt-get install ssh 
	- copy key files hostmonster_rsa and bitbucket_rsa (need to create one for user) to: ~/.ssh/
	- set the ssh agent up to run automatically when somebody logs in:
		- add the following to ~/.bash_profile, if .bash_profile does not exist, just create a new one
			
			SSH_ENV="$HOME/.ssh/environment"

			function start_agent {
				echo "Initialising new SSH agent..."
				/usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
				echo succeeded
				chmod 600 "${SSH_ENV}"
				. "${SSH_ENV}" > /dev/null
				/usr/bin/ssh-add;
			}

			# Source SSH settings, if applicable

			if [ -f "${SSH_ENV}" ]; then
				. "${SSH_ENV}" > /dev/null
				ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
				start_agent;
			}
			else
				start_agent;
			fi
			
		- now every time you login you should get a message that the SSH agent is being initialised
	- add keyfiles with 'ssh-add ~/.ssh/hostmonster_rsa' and 'ssh-add ~/.ssh/bitbucket_rsa' (this also needs to be done from within the build script and hence the pathes need to be updated, see below)
	- it might be necessary to change read write permissions:
		- chmod 600 ~/.ssh/KEYFILES
		
	
Install TexLive
	- sudo apt-get install texlive-latex-extra
	- sudo apt-get install latex2html

Install and verify MATLAB installation


Install and setup up git
	- sudo apt-get install git
	

Setup the buildsys
	- create a directory of your choosing. e.g. mkdir ~/esbuildsys
	- copy the files config.pl, build.pl, publish.pl, esbuild.m and mkequations.pl
	- go through settings in config.pl, and adapt them if you wish
		- see config.pl for details on the individual parameters

Running the build.pl
	- build all EasySpin versions that are not in the easyspin-builds directory and upload the most recent versions
		- perl build.pl
	- build a specific tag
		- perl build.pl 5.3.1
		- only builds the easyspin version, but does not upload anything
		
Running publish.pl
	- publish MUST be called with an argument that specifies the version that you want to upload
	- the corresponding easyspin-TAG.zip file must be in the build directory (specified with config.pl)
	- example call to upload the 5.2.22 version: perl publish.pl 5.2.22
	- the release channel can be specified in config.pl, e.g.:
		- my $stableversion = 5;
		- all easyspin major versions 5 are interpreted as meant for the release channel stable
		- publish.pl will update all entries on the website that are tagged with stable with the version that is being uploaded
	- development versions need to end with alpha/beta/dev and optional a number, e.g: easyspin-6.0.0-dev.3, easyspin-5.2.24-beta
		- these are all interpreted as belonging to the development channel and everything that is tagged with development is updated on the website, regardless of the major version
	- it is possible to upload a build that does not conform to the semantic versioning, e.g. easyspin-evolve.zip
		- this could be an experimental build, coming from a specific branch
		- the releasechannel for such a file always is 'experimental'
		- easyspin-evolve.zip must be present in the build directory!
		- perl publish.pl evolve